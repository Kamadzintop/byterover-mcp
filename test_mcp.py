#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã ByteRover MCP Server
"""

import json
import subprocess
import sys
import os

def test_mcp_server():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ MCP —Å–µ—Ä–≤–µ—Ä–∞"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ ByteRover MCP Server")
    print("=" * 50)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º MCP —Å–µ—Ä–≤–µ—Ä
    try:
        process = subprocess.Popen(
            [sys.executable, "mcp_server.py"],
            stdin=subprocess.PIPE,
            stdout=subprocess.PIPE,
            stderr=subprocess.PIPE,
            text=True
        )
        
        if process.stdin is None or process.stdout is None:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å MCP —Å–µ—Ä–≤–µ—Ä")
            return False
        
        # –¢–µ—Å—Ç 1: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
        print("1. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏...")
        init_request = {
            "jsonrpc": "2.0",
            "id": 1,
            "method": "initialize",
            "params": {
                "protocolVersion": "2024-11-05",
                "capabilities": {},
                "clientInfo": {
                    "name": "test-client",
                    "version": "1.0.0"
                }
            }
        }
        
        process.stdin.write(json.dumps(init_request) + "\n")
        process.stdin.flush()
        
        response = process.stdout.readline()
        init_response = json.loads(response)
        
        if "result" in init_response:
            print("‚úÖ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞")
            print(f"   –°–µ—Ä–≤–µ—Ä: {init_response['result']['serverInfo']['name']}")
        else:
            print("‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏")
            return False
        
        # –¢–µ—Å—Ç 2: –°–ø–∏—Å–æ–∫ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
        print("\n2. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤...")
        tools_request = {
            "jsonrpc": "2.0",
            "id": 2,
            "method": "tools/list",
            "params": {}
        }
        
        process.stdin.write(json.dumps(tools_request) + "\n")
        process.stdin.flush()
        
        response = process.stdout.readline()
        tools_response = json.loads(response)
        
        if "result" in tools_response:
            tools = tools_response["result"]["tools"]
            print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(tools)} –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤:")
            for tool in tools:
                print(f"   ‚Ä¢ {tool['name']}: {tool['description']}")
        else:
            print("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤")
            return False
        
        # –¢–µ—Å—Ç 3: –ü–æ–∏—Å–∫ —Ñ–∞–π–ª–æ–≤
        print("\n3. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤...")
        file_search_request = {
            "jsonrpc": "2.0",
            "id": 3,
            "method": "tools/call",
            "params": {
                "name": "file_search",
                "arguments": {
                    "query": "*.py"
                }
            }
        }
        
        process.stdin.write(json.dumps(file_search_request) + "\n")
        process.stdin.flush()
        
        response = process.stdout.readline()
        search_response = json.loads(response)
        
        if "result" in search_response:
            print("‚úÖ –ü–æ–∏—Å–∫ —Ñ–∞–π–ª–æ–≤ —Ä–∞–±–æ—Ç–∞–µ—Ç")
            content = search_response["result"]["content"][0]["text"]
            print(f"   –†–µ–∑—É–ª—å—Ç–∞—Ç: {content[:100]}...")
        else:
            print("‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤")
            return False
        
        # –¢–µ—Å—Ç 4: –ê–Ω–∞–ª–∏–∑ –∫–æ–¥–∞
        print("\n4. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∞ –∫–æ–¥–∞...")
        analysis_request = {
            "jsonrpc": "2.0",
            "id": 4,
            "method": "tools/call",
            "params": {
                "name": "code_analysis",
                "arguments": {
                    "file_path": "mcp_server.py",
                    "analysis_type": "review"
                }
            }
        }
        
        process.stdin.write(json.dumps(analysis_request) + "\n")
        process.stdin.flush()
        
        response = process.stdout.readline()
        analysis_response = json.loads(response)
        
        if "result" in analysis_response:
            print("‚úÖ –ê–Ω–∞–ª–∏–∑ –∫–æ–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç")
            content = analysis_response["result"]["content"][0]["text"]
            print(f"   –†–µ–∑—É–ª—å—Ç–∞—Ç: {content[:100]}...")
        else:
            print("‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –∫–æ–¥–∞")
            return False
        
        # –ó–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å
        process.terminate()
        process.wait()
        
        print("\n" + "=" * 50)
        print("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!")
        print("MCP —Å–µ—Ä–≤–µ—Ä –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –≤ Cursor")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        return False

if __name__ == "__main__":
    success = test_mcp_server()
    sys.exit(0 if success else 1) 