#!/usr/bin/env python3
"""
ByteRover MCP Server - –Ω–∞—Å—Ç–æ—è—â–∏–π MCP —Å–µ—Ä–≤–µ—Ä —á–µ—Ä–µ–∑ stdio
"""

import json
import sys
import os
from typing import Dict, Any, List, Optional
import glob

class ByteRoverMCPServer:
    def __init__(self):
        self.initialized = False
        self.tools = [
            {
                "name": "file_search",
                "description": "–ü–æ–∏—Å–∫ —Ñ–∞–π–ª–æ–≤ –ø–æ –∏–º–µ–Ω–∏",
                "inputSchema": {
                    "type": "object",
                    "properties": {
                        "query": {
                            "type": "string",
                            "description": "–ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å"
                        }
                    },
                    "required": ["query"]
                }
            },
            {
                "name": "code_analysis",
                "description": "–ê–Ω–∞–ª–∏–∑ –∫–æ–¥–∞ —Å –ø–æ–º–æ—â—å—é AI",
                "inputSchema": {
                    "type": "object",
                    "properties": {
                        "file_path": {
                            "type": "string",
                            "description": "–ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞"
                        },
                        "analysis_type": {
                            "type": "string",
                            "enum": ["review", "optimization", "documentation"],
                            "description": "–¢–∏–ø –∞–Ω–∞–ª–∏–∑–∞"
                        }
                    },
                    "required": ["file_path"]
                }
            }
        ]
    
    def send_response(self, id: Optional[str], result: Any = None, error: Optional[Dict[str, Any]] = None):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–≤–µ—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ MCP"""
        response = {
            "jsonrpc": "2.0",
            "id": id
        }
        
        if error:
            response["error"] = error
        else:
            response["result"] = result
        
        print(json.dumps(response), flush=True)
    
    def handle_initialize(self, params: Dict[str, Any], request_id: Optional[str]):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ MCP"""
        self.initialized = True
        
        result = {
            "protocolVersion": "2024-11-05",
            "capabilities": {
                "tools": {
                    "listChanged": True
                },
                "resources": {},
                "logging": {
                    "level": "info"
                }
            },
            "serverInfo": {
                "name": "ByteRover MCP Server",
                "version": "1.0.0"
            }
        }
        
        self.send_response(request_id, result=result)
    
    def handle_tools_list(self, params: Dict[str, Any], request_id: Optional[str]):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ —Å–ø–∏—Å–∫–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤"""
        result = {"tools": self.tools}
        self.send_response(request_id, result=result)
    
    def handle_tools_call(self, params: Dict[str, Any], request_id: Optional[str]):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–∑–æ–≤–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞"""
        try:
            name = params.get("name")
            arguments = params.get("arguments", {})
            
            if name == "file_search":
                result = self.file_search_tool(arguments)
            elif name == "code_analysis":
                result = self.code_analysis_tool(arguments)
            else:
                raise ValueError(f"Unknown tool: {name}")
            
            self.send_response(request_id, result={"content": result})
            
        except Exception as e:
            error = {
                "code": -32603,
                "message": f"Tool execution error: {str(e)}"
            }
            self.send_response(request_id, error=error)
    
    def file_search_tool(self, arguments: Dict[str, Any]) -> List[Dict[str, Any]]:
        """–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –ø–æ–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤"""
        query = arguments.get("query", "")
        
        # –ü—Ä–æ—Å—Ç–æ–π –ø–æ–∏—Å–∫ —Ñ–∞–π–ª–æ–≤ –≤ —Ç–µ–∫—É—â–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        try:
            # –ò—â–µ–º —Ñ–∞–π–ª—ã –ø–æ –ø–∞—Ç—Ç–µ—Ä–Ω—É
            if "*" in query:
                files = glob.glob(query, recursive=True)
            else:
                # –ò—â–µ–º —Ñ–∞–π–ª—ã, —Å–æ–¥–µ—Ä–∂–∞—â–∏–µ query –≤ –∏–º–µ–Ω–∏
                files = []
                for root, dirs, filenames in os.walk("."):
                    for filename in filenames:
                        if query.lower() in filename.lower():
                            files.append(os.path.join(root, filename))
            
            if files:
                return [
                    {
                        "type": "text",
                        "text": f"–ù–∞–π–¥–µ–Ω–æ {len(files)} —Ñ–∞–π–ª–æ–≤ –ø–æ –∑–∞–ø—Ä–æ—Å—É '{query}':\n" + 
                               "\n".join([f"‚Ä¢ {f}" for f in files[:10]])  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10
                    }
                ]
            else:
                return [
                    {
                        "type": "text",
                        "text": f"–§–∞–π–ª—ã –ø–æ –∑–∞–ø—Ä–æ—Å—É '{query}' –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
                    }
                ]
        except Exception as e:
            return [
                {
                    "type": "text",
                    "text": f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤: {str(e)}"
                }
            ]
    
    def code_analysis_tool(self, arguments: Dict[str, Any]) -> List[Dict[str, Any]]:
        """–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –∞–Ω–∞–ª–∏–∑–∞ –∫–æ–¥–∞"""
        file_path = arguments.get("file_path", "")
        analysis_type = arguments.get("analysis_type", "review")
        
        try:
            if not os.path.exists(file_path):
                return [
                    {
                        "type": "text",
                        "text": f"–§–∞–π–ª {file_path} –Ω–µ –Ω–∞–π–¥–µ–Ω"
                    }
                ]
            
            # –ß–∏—Ç–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞
            with open(file_path, 'r', encoding='utf-8') as f:
                content = f.read()
            
            # –ü—Ä–æ—Å—Ç–æ–π –∞–Ω–∞–ª–∏–∑ (–≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ –∑–¥–µ—Å—å –±—ã–ª –±—ã AI)
            lines = content.split('\n')
            char_count = len(content)
            
            analysis_result = f"""
üìä –ê–Ω–∞–ª–∏–∑ —Ñ–∞–π–ª–∞: {file_path}
üîç –¢–∏–ø –∞–Ω–∞–ª–∏–∑–∞: {analysis_type}

üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:
‚Ä¢ –°—Ç—Ä–æ–∫ –∫–æ–¥–∞: {len(lines)}
‚Ä¢ –°–∏–º–≤–æ–ª–æ–≤: {char_count}
‚Ä¢ –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {len(content.encode('utf-8'))} –±–∞–π—Ç

üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:
‚Ä¢ –§–∞–π–ª –≥–æ—Ç–æ–≤ –∫ {analysis_type}
‚Ä¢ –†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥–∞ –¥–ª–∏–Ω–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π
‚Ä¢ –î–æ–±–∞–≤—å—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∫ —Å–ª–æ–∂–Ω—ã–º —É—á–∞—Å—Ç–∫–∞–º –∫–æ–¥–∞
"""
            
            return [
                {
                    "type": "text",
                    "text": analysis_result
                }
            ]
            
        except Exception as e:
            return [
                {
                    "type": "text",
                    "text": f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ñ–∞–π–ª–∞ {file_path}: {str(e)}"
                }
            ]
    
    def handle_request(self, request: Dict[str, Any]):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞"""
        method = request.get("method")
        params = request.get("params", {})
        request_id = request.get("id")
        
        if method == "initialize":
            self.handle_initialize(params, request_id)
        elif method == "initialized":
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
            print(f"Initialized notification received", file=sys.stderr)
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏
            ready_notification = {
                "jsonrpc": "2.0",
                "method": "notifications/ready",
                "params": {}
            }
            print(json.dumps(ready_notification), flush=True)
        elif method == "tools/list":
            self.handle_tools_list(params, request_id)
        elif method == "tools/call":
            self.handle_tools_call(params, request_id)
        elif method == "ping":
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ ping –∑–∞–ø—Ä–æ—Å–∞
            self.send_response(request_id, result={})
        elif method == "shutdown":
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ shutdown –∑–∞–ø—Ä–æ—Å–∞
            self.send_response(request_id, result={})
            sys.exit(0)
        else:
            if request_id:  # –¢–æ–ª—å–∫–æ –¥–ª—è –∑–∞–ø—Ä–æ—Å–æ–≤ —Å ID
                error = {
                    "code": -32601,
                    "message": f"Method not found: {method}"
                }
                self.send_response(request_id, error=error)
            else:
                print(f"Unknown notification: {method}", file=sys.stderr)
    
    def run(self):
        """–ó–∞–ø—É—Å–∫ MCP —Å–µ—Ä–≤–µ—Ä–∞"""
        print("üöÄ ByteRover MCP Server –∑–∞–ø—É—â–µ–Ω (stdio)", file=sys.stderr)
        
        for line in sys.stdin:
            try:
                request = json.loads(line.strip())
                self.handle_request(request)
            except json.JSONDecodeError as e:
                print(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: {e}", file=sys.stderr)
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞: {e}", file=sys.stderr)

if __name__ == "__main__":
    server = ByteRoverMCPServer()
    server.run() 